程序设计笔记

程序设计基础
编码 机器语言 汇编语言 高级语言
16位无符号数 0 2**16-1
16位有符号数 0 2**15-1 -2**15 -2**15+1 -1 排列有跳跃
计算机字与字长
计算机求解问题
问题描述 数学建模 算法设计 程序设计 问题的解
算法Algorithm 为解决一个具体问题而采取的 确定的 有限的 操作步骤
程序 = 算法 + 数据结构
程序设计 算法设计 结构设计

传统流程图
开始 结束 椭圆
处理 矩形
输入 输出 平行四边形
判断 菱形
连接符 小圆
流程线
N-S结构化流程图 取消了流程线

顺序结构
选择结构
单分支 双分支 多分支 
循环结构
条件控制 计数控制
当型 直到型

C语言程序设计

高级语言程序设计(Python)

函数
变量作用域 全局变量 局部变量
global

函数方法=>模块=>包
from bs4 import BeautifulSoup
模块(module)是一个Python文件，以.py结尾，包含了Python函数等语句。先导入，再使用，用模块.函数名调用。
查看模块的函数方法
import math
dir(math)
help(math.sin)

input()函数 默认当作一个字符串，使用folat()等类型转换
bool->int->float->complex 
print()
x = 32
print("输出:%0.2f"%x)
print("输出:{0:0.2f}".format(x))

while与for循环 任何for都可以用while改写
while不确定次数
for确定次数

break与continue
break结束当前循环体
continue跳过本次循环

递归
阶乘
斐波那契数列
路边随机停车问题
长度为5的马路，平均能停多少辆长度为1的汽车？
def park_randomly(low, high):
    if high - low < 1:
        return 0
    else:
        x = 
        .uniform(low, high-1)
        return 1 + park_randomly(low, x) + park_randomly(x+1, high)

汉诺塔问题
定义函数hanoi(n, A, B, C)表示把A上的n个盘子移动到C上，其中可以用到B
def hanoi(n, A, B, C):
    if n == 1:
        print("Move disk", n "from", A, "to", C)
    else:
        hanoi(n-1, A, C, B)
        print("Move disk", n "from", A, "to", C)
        hanoi(n-1, B, A, C)
n = int(raw_input("输入一个整数："))
hanoi(n, "左", "中", "右")

字符串
切片[start:end:step]
format()
print("Hello {} good {}.".format(5, "days"))

正则表达式 Regular Expression
import re

简洁表达一组字符串的表达式 一行就是特征（模式）
编译：将符合正则表达式语法的字符串转换成正则表达式特征
regex = 'P(Y|YT|YTH|YTHO)?N'
p = re.compile(regex)

.任意一个字符
[] 字符集对单个字符给出取值范围 [abc]表示a、b、c [a-z]表示a到z的单个字符
[^] 非字符集
\d任意一个数字
\d+一系列数字
[a-z]一个小写字母

列表
列表解析或推导List Comprehension
一种由原列表创建新列表的简洁方法
[表达式 for 变量 in 列表 if 条件]
[x**2 for x in range(1, 10)]

lambda函数
定义匿名函数
lambda x: x**2

元组 不可变列表

字典
键值对 类似纸质字典，通过单词索引找到其相关的定义
C++: map
Java: HashTable or HashMap
单词计数
翻转字典

集合set()

类 对象 面向对象的编程

类的定义
class 类名(父类名): 
    pass
如：
class Animals:
    def move(self):
        print("moving")
    def eat(self):
        print("eating food")

class Mammals(Animals):
    def breastfeed(self):
        print("feeding young")

class Cats(Mammals):
    def __init__(self, spots):
        #__init__构造函数:初始化对象的各属性
        self.spots = spots
    def catch_mouse(self):
        print("catch mouse")

Kitty = Cats(10)
print(Kitty.spots)
Kitty.move()

子类实例化出来的对象，可以使用自身和父类的函数与变量

类命名时第一个字母常大写

类中定义函数时，语法规定第一个参数必须是self
类内定义函数时，如调用自身或父类的函数与变量，须用self.引导应写为self.函数名或self.变量名

_foo: 以单下划线开头的表示的是protected类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于from module import *
__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了
__foo__: 头尾双下划线定义的是特列方法，类似__init__() 之类的

面相对象的特点
封装
抽象对象 将数据和操作打包 对象的实现与使用独力 支持代码复用
多态
对象怎么回应一个依赖于对象类型或种类的消息 在不同情况下用一个函数名启用不同方法 灵活性
继承
类继承 避免重复操作 提高代码复用性

编码
ASCII码 7个二进制位编码
Python提供ord()与char()
ord('a')
97
char(97)
'a'
Unicode 跨平台 跨语言 统一且唯一的二进制编码 每个字符占用两个字节
编码encode()
b'\xe5\xa4\xa7'
'大'.encode()
解码decode()
b'\xe5\xa4\xa7'.decode()
'大'

文件操作
file = open(<name>, <mode>)
for line in file.readlines():
    pass
file.close()
Python将文件看作是一个行序列
read() readlines() readline()

Python Web Django2.0操作
HTTP协议 Hyper Text Transfer Protocol 超文本传输协议
基于“请求与响应”模式 无状态的应用层协议 采用URL作为网络资源定位标志 http://hsot[:port][path]
GET HEAD POST PUT PATCH DELETE
Web服务器 提供HTTP/HTTPS访问服务
Django MTV Model-Template-View        Web框架，一个半成品
用户<-HTTP->WSGI<-URLs->路由(如mysite下的urls.py)<-->功能处理逻辑(某个app下的views.py)<-->Models(某个app下的models.py) Template(模板语言)

用Django建立一个Web项目的步骤：
django-admin startproject mysite
mysite/ 外层目录可以更改、打包
    mysite/ 工程目录
        _init_.py 一个将mysite定义为包的空文件
        settings.py 配置整个工程文件
        urls.py 路由文件 URL路由的声明文件
        wsgi.py 基于WSGI的Web服务器的配置文件 一般不动
    manage.py 与整个工程进行交互的命令行工具
    helloapp/ 创建的具体应用

修改，增加功能
python manage.py startapp helloapp
    helloapp/
        views.py 写具体的函数

到mysite下的urls.py指定URL与处理函数之间的关系
path('index/', views.hello)
      某个URL  处理URL所使用的函数

设置模板路径
mysite/
    settings.py
        TEMPLATES = [
            {
                'DIRS': [
                    os.path.join(BASE_DIR, 'helloapp/templates'),
                ],
                # 其他
            },
        ]

运行服务器
python manage.py runserver

Django URL路由机制
