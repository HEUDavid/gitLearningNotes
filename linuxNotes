svn

docker
docker 是一个开源的应用容器 开发者打包他们的应用以及依赖包 方便便捷 到一个轻量级可移植的容器中 
容器性能开销低
docker 应用场景
Web 应用的自动化打包和发布。
自动化测试和持续集成、发布。
在服务型环境中部署和调整数据库或其他的后台应用。
从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。

wget -qO- https://get.docker.com/ | sh
当要以非root用户可以直接运行docker时，需要执行 sudo usermod -aG docker runoob 命令，然后重新登陆，否则会有如下报错

启动docker后台服务
sudo service docker start

容器和镜像
对象和类
镜像是用于创建容器的模板
容器是独立运行的一个或者一组应用
docker run 命令
docker run ubuntu:15.10 /bin/echo "Hello world"
运行交互式的容器
docker run -i -t ubuntu:15.10 /bin/bash
-t:在新容器内指定一个伪终端或终端
-i:允许你对容器内的标准输入 (STDIN) 进行交互
后台模式
docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"

docker ps
docker ps -l 查询最后一次创建的容器
docker logs id

docker logs name
docker run
docker stop

docker pull training/webapp  # 载入镜像
docker run -d -P training/webapp python app.py
docker run -d -p 5000:5000 training/webapp python app.py
docker run -d -P --name runoob training/webapp python app.py
-d:让容器在后台运行。
-P:将容器内部使用的网络端口映射到我们使用的主机上。
--name runoob为容器命名
网络端口的快捷方式
docker port id

docker logs -f id 查看容器内部的标准输出
-f tail -f
docker inspect 来查看 Docker 的底层信息
docker images 来列出本地主机上的镜像
docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载
docker pull ubuntu:13.10

创建镜像
从已经创建的容器中更新镜像 并且提交这个镜像 使用dockerfile指令来创建一个镜像

更新镜像
更新镜像之前 使用镜像创建一个容器
docker run -t -i ubuntu:15.10 /bin/bash
在运行的容器内使用 apt-get update 命令进行更新。
在完成操作之后，输入 exit 命令来退出这个容器。

此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本。
docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2
各个参数说明：

-m:提交的描述信息
-a:指定镜像作者
e218edb10161：容器ID
runoob/ubuntu:v2:指定要创建的目标镜像名

我们可以使用 docker images 命令来查看我们的新镜像 runoob/ubuntu:v2：

docker build 构建镜像
我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像
docker build -t runoob/centos:6.7 .
-t ：指定要创建的目标镜像名
. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径
docker tag 860c279d2fec runoob/centos:dev为镜像添加一个新的标签

网络端口映射
docker run -d -P training/webapp python app.py
-P :是容器内部端口随机映射到主机的高端口
-p : 是容器内部端口绑定到指定的主机端口 -p 5000:5000
docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py
默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 /udp。
快速查看容器映射到主机上的端口docker port adoring_stonebraker 5000

端口冲突？
Docker容器连接？端口映射 docker 连接系统

docker run -d -p 8082:80 --name runoob-nginx-test-web -v ~/nginx/www:/usr/share/nginx/html -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx/logs:/var/log/nginx nginx

-v ~/nginx/www:/usr/share/nginx/html：将我们自己创建的 www 目录挂载到容器的 /usr/share/nginx/html

容器生命周期管理
run start stop restart kill rm pause unpause exec

creat(docker create ：创建一个新的容器但不启动它)
容器操作
ps
inspect(获取元数据)
top
docker attach :连接到正在运行中的容器
docker exec -it id /bin/bash
events
logs
wait
export
port
容器 rootfs 命令
commit
cp
diff
镜像操作
login
pull
push
search
本地镜像管理
images
rmi
tag
build
history
save
load
import

vim
shift+g 跳转到最后一行
/aa 从上向下搜索aa n下一个
?aa 从下向上搜索aa
快速搜索 将光标放在要搜索的单词上shift+*
替换
:%s/aa/bb/g 表示将aa替换为bb g表示替换标志全局 i表示大小写不敏感 I表示大小写敏感
:s/aa/bb/g 当前行
选中区之后输入 : Vim即可自动补全为 :'<,'>
:'<,'>s/aa/bb/g
:5,12s/aa/bb/g
:.,+2s/aa/bb/g
:%s/aa/bb/gc 加c表示需要确认

grep
#多文件查询
grep leo logs.log logs_back.log

#查找即包含leo又包含li的行
grep leo logs.log | grep li

#查找匹配leo或者匹配li的行
grep leo | li logs.log ???

#显示匹配行前2行
grep leo logs.log -A2

#显示匹配行后2行
grep leo logs.log -B2

#显示匹配行前后2行
grep leo logs.log -C2

#不区分大小写
grep -i leo logs.log

#使用正则表达式
grep -e '[a-z]\{5\}' logs.log

#查找不包含leo的行
grep -v leo logs.log

#统计包含leo的行数
grep -c leo logs.log

#遍历当前目录及所有子目录查找匹配leo的行
grep -r leo .

#在当前目录及所有子目录查找所有java文件中查找leo
grep -r leo . --include "*.java"

#查找并输出到指定文件
grep leo logs.log > result.log

#查找以leo开头的行
grep ^leo logs.log

#查找以leo结尾的行
grep leo$ logs.log

#查找空行
grep ^$ logs.log

find
find . -name "*.c"
find . -type f
find . -ctime -20
find /var/log -type f -mtime +7 -ok rm {} \;

find . -type f -perm 644 -exec ls -l {} \;

sed利用脚本来处理文件
sed -e 4a\newLine testfile
sed '2,5d' testfile
sed '2d'
sed '3,$d'

sed -n '3p' /var/log/yum.log
sed -n '3,9p' /var/log/yum.log
sed -n '/hhh/,/omc/p' yum.log 显示包含hhh和omc行之间内容的行

nl file列出文件行号

awk 处理文本文件的语言 是一个强大的文本分析工具
awk '{[pattern] action}' {filenames}   # 行匹配语句 awk '' 只能用单引号
awk '{print $1,$4}' log.txt
awk -F  #-F相当于内置变量FS, 指定分割字符
awk -F, '{print $1,$2}'   log.txt

awk -v 设置变量
awk -f {awk脚本} {文件名}

grep 、sed、awk被称为linux中的"三剑客"。
grep 更适合单纯的查找或匹配文本
sed  更适合编辑匹配到的文本
awk  更适合格式化文本，对文本进行较复杂格式处理
netstat
netstat -a 列出所有端口
netstat -at
netstat -au

netstat -l 仅列出有在 Listen (监听) 的服務状态
netstat -lt
netstat -lu
netstat -lx

netstat -s 显示所有端口的统计信息
netstat -st
netstat -su

netstat -p 显示pid和进程名称


netstat -nu 显示当前用户的UDP连接状况

netstat -apu 显示UDP端口号的使用情况

netstat -i 显示网卡列表
netstat -g 显示组播组的关系

tcpdump
执行tcpdump指令可列出经过指定网络界面的数据包文件头，在Linux操作系统中，你必须是系统管理员
tcpdump -c 20
tcpdump -c 10 -q //精简模式显示 10个包


lsof(list open files)是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。

可以列出被进程所打开的文件的信息。被打开的文件可以是

1.普通的文件，2.目录  3.网络文件系统的文件，4.字符设备文件  5.(函数)共享库  6.管道，命名管道 7.符号链接

8.底层的socket字流，网络socket，unix域名socket

9.在linux里面，大部分的东西都是被当做文件的…..还有其他很多

怎样使用lsof

这里主要用案例的形式来介绍lsof 命令的使用

1.列出所有打开的文件:

lsof

备注: 如果不加任何参数，就会打开所有被打开的文件，建议加上一下参数来具体定位

2. 查看谁正在使用某个文件

lsof   /filepath/file

3.递归查看某个目录的文件信息

lsof +D /filepath/filepath2/

备注: 使用了+D，对应目录下的所有子目录和文件都会被列出

4. 比使用+D选项，遍历查看某个目录的所有文件信息 的方法

lsof | grep ‘/filepath/filepath2/’

5. 列出某个用户打开的文件信息

lsof  -u username

备注: -u 选项，u其实是user的缩写

6. 列出某个程序所打开的文件信息

lsof -c mysql

备注: -c 选项将会列出所有以mysql开头的程序的文件，其实你也可以写成lsof | grep mysql,但是第一种方法明显比第二种方法要少打几个字符了

7. 列出多个程序多打开的文件信息

lsof -c mysql -c apache

8. 列出某个用户以及某个程序所打开的文件信息

lsof -u test -c mysql

9. 列出除了某个用户外的被打开的文件信息

lsof   -u ^root

备注：^这个符号在用户名之前，将会把是root用户打开的进程不让显示

10. 通过某个进程号显示该进行打开的文件

lsof -p 1

11. 列出多个进程号对应的文件信息

lsof -p 123,456,789

12. 列出除了某个进程号，其他进程号所打开的文件信息

lsof -p ^1

13 . 列出所有的网络连接

lsof -i

14. 列出所有tcp 网络连接信息

lsof  -i tcp

15. 列出所有udp网络连接信息

lsof  -i udp

16. 列出谁在使用某个端口

lsof -i :3306

17. 列出谁在使用某个特定的udp端口

lsof -i udp:55

特定的tcp端口

lsof -i tcp:80

18. 列出某个用户的所有活跃的网络端口

lsof  -a -u test -i

19. 列出所有网络文件系统

lsof -N

20.域名socket文件

lsof -u

21.某个用户组所打开的文件信息

lsof -g 5555

22. 根据文件描述列出对应的文件信息

lsof -d description(like 2)

23. 根据文件描述范围列出文件信息

lsof -d 2-3


sort
功能说明：将文本文件内容加以排序,sort可针对文本文件的内容，以行为单位来排序。
sort file
sort -u file 去除重复行

sort -n number 行中有数字的排序
sort -nr number -o number 将排序结果输出到原文件中
sort -n -k 2 -t'-' date

2019-01-04 以'-'为分隔符 第二个为排序依据

xargs
xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。

之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令，例如：
cat test.txt | xargs -n3

nohub 不挂断地运行命令
nohub command arg ... & 一般两个一起用

nohub.out维护管理方法 清空nohub.out
cp /dev/null nohub.out
cat /dev/null > nohub.out

nohub的重定向 一劳永逸解决nohub.out文件过大的问题

//只输出错误信息到日志文件
nohup ./program >/dev/null 2>log &
//什么信息也不要
nohup ./program >/dev/null 2>&1 &


关于/dev/null文件 
Linux下还有一个特殊的文件/dev/null，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。这一点非常有用，当我们不需要回显程序的所有信息时，就可以将输出重定向到/dev/null

top 性能分析工具

virt 虚拟占用内存
RES 常用内存
SHR 共享内存

输入k 然后可以快速杀进程

df 统计磁盘信息
du 查看文件的磁盘使用情况
ps 显示当前进程的状态
ps -a 同一个终端 —A 所有进程
ps -u root
ps -ef 显示所有进程信息，连同命令行
ps -ef|grep ssh常用组合用法，查找特定进程
ps aux列出目前所有的正在内存当中的程序


tar [-cxt zj v f pP N] --exclude File
c creat 创建压缩文件 x 解压 t 查看 z gzip属性 j bzip2属性 v 显示文件压缩解压过程 f 使用档名 p原文件原来的属性 P绝对路径 N后接日期


压缩
tar -cvf /tmp/etc.tar /etc 仅打包不压缩
tar -zcvf /tmp/etc.tar.gz /etc 以gzip压缩
tar -jcvf /tmp/etc.tar.bz2 /etc 以bzip2压缩

查看压缩文件里的内容
tar -tvf /tmp/etc.tar
tar -ztvf /tmp/etc.tar.gz
tar -jtvf /tmp/etc.tar.bz2

解压
tar -zxvf /tmp/etc.tar.gz 将会解压到当前目录下

单独解压一部分
文件备份 保留其原始权限
tar -zcvpf /tmp/etc.tar.gz /etc

在home 比某个日期还要新的文件才备份
tar -N "2005/06/01" -zcvf home.tar.gz /home

不包括
tar --exclude /home/aa -zcvf myfile.tar.gz /home/* /etc

将/etc 打包后直接解开在/tmp底下 而不产生文件
cd /tmp
tar -cvf - /etc | tar -xvf -

cat -n file 带行号
cat -n file > file1 输入到file1
清空文件内容
cat /dev/null > file


date +"%Y %m %d %H %M %S"

date -s 设置时间



free 命令显示系统内存的使用情况，包括物理内存、交换内存(swap)和内核缓冲区内存。
free -h -s 3


iptables 客户端代理 将按照用户的设定执行对应的安全框架 这个安全框架才是真正的防火墙 netfilter 位于内核空间
封包过滤 封包重定向 网络地址转换

链的概念

具有相同功能的规则的集合叫做表 不同功能的规则 我们可以放置在不同的表中进行管理
filter表:
nat表:
mangle表:拆解报文 做出修改
raw表:关闭nat表上启用的连接追踪机制

同一个链中表的优先级
raw --> mangle --> nat --> filter

匹配条件 与 处理动作
匹配条件 源地址 目标地址 源端口 目标端口
处理动作 ACCEPT DROP REJECT 
操作命令:
查看某张表中的规则
iptables -t filter -L
iptables -t 表名 -L
iptables -t 表名 -L 链名

iptables -t 表名 -v -L -n
--line-number
-n 表示不解析IP地址

iptables -F INPUT 清空filter表中INPUT链中的规则
iptables -t 表名 -F 链名 
插入
iptables -t filter -I INPUT 2 -s 192.168.1.146 -j DROP
-I 首部
-A 追加
iptables -t filter -I -P 链名 动作 指定为默认动作

删除 
iptables -t filter -D INPUT 3
iptables -t filter -D INPUT -s 192.168.1.146 -j ACCEPT
修改
iptables -t 表名 -R 链名 规则序号 规则原本的匹配条件 -j 动作

保存规则
service iptables save
iptables-save > /etc/sysconfig/iptables
iptables-restore < /etc/sysconfig/iptables

ifconfig
ifconfig工具不仅可以被用来简单地获取网络接口配置信息，还可以修改这些配置。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。

ifconfig -a
ifconfig -s

关闭网卡
ifconfig eth0 down|up

// 配置ip地址
ifconfig eth0 192.168.1.100
 
// 配置ip地址和子网掩码
ifconfig eth0 192.168.1.100 netmask 255.255.255.0
 
// 配置ip地址、子网掩码和广播地址
ifconfig eth0 192.168.1.100 netmask 255.255.255.0 broadcast 192.168.1.255
 
单网卡添加多个IP地址

ifconfig eth0:0 192.168.1.100 netmask 255.255.255.0 up
 
ifconfig eth0:1 192.168.2.100 netmask 255.255.255.0 up
 

删除IP地址

ifconfig eth0 del 192.168.1.100

配置ARP
配置ipv6
多播 传输单元
