Git学习笔记

Git干货，常用
    Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上，即由多人共同开发。
    git init 将这个目录变成Git可以管理的仓库
    git add <path> 添加文件修改到暂存区，可以添加具体文件、文件夹、通配符（git add .）
    git commit -m "说明" 把暂存区提交到当前分支master 可以多次add，一次commit
    git status
    git push origin master
    git clone ...

版本回退
    git log 查看历史记录
    git reset --hard HEAD^ 上一个版本
    git reset --hard HEAD^^ 上上一个版本
    git reset --hard HEAD~100 上100个版本
    git reset --hard 加上commit id的数字（前几位）
    git reflog 记录你的每一次命令 可以根据commit id回退到任何一个版本

工作区与暂存区
    工作区（Working Directory）就是所看到的目录
    版本库（Repositor）就是.git
    暂存区（stage）
    .git里包含了很多重要信息其中就有暂存区（stage）
    git diff HEAD -- <file> 查看当前版本库和工作区的区别

撤销修改
    git checkout -- <file> 回到最近一次git commit或者git add

删除操作
    直接在文件管理器里删除或者rm <file>
    然后看git status
    git rm <file>
    git commit
    如果删错了，可以git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

远程仓库
    Git与SVN
    Git配置
        设置用户，三个级别，分别查看：
        git config --system --list
        git config --global  --list
        git config --local  --list
        常用的只需：
            git config --global user.name "David"
            git config --global user.email "david@hrbeu.edu.cn"
        和GitHub连接：
        ssh-keygen -t rsa -b 4096 -C "david@hrbeu.edu.cn"
        将生成的公钥配置到Github账户中
        测试连接：
            ssh -T git@github.com
        原文地址：https://help.github.com/articles/connecting-to-github-with-ssh/

    先关联远程库
        git remote add origin git@github.com:HEUDavid/仓库名.git
        git push -u origin master
        远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
        本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
        由于远程库是空的，我们第一次推送master分支时，加上了-u参数，关联本地的master分支和远程的master分支，在以后的推送或者拉取时就可以简化命令。
        git push origin master
        以后这样：
            git add <file>
            git commit -m "desc"
            git push origin master
    克隆
        git clone git@github.com:HEUDavid/gitSkills.git
        Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
    
    分支管理
        每次提交，Git都把它们串成一条时间线（有向无环图），这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
        当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。以后的修改就在dev分支上。
            创建分支
                git branch <nane> 创建
                git checkout <name> 切换
                或者
                git checkout -b dev
                git checkout 命令加上-b参数表示创建并切换
            查看分支
                git branch 命令会列出所有分支，当前分支前面会标一个*号
            分支合并
                dev分支合并到master分支（当前分支）
                git merge dev
                现在在dev1分支上，将其合并到dev分支上
                git checkout dev
                git merge dev1
            删除分支dev
                git branch -d dev
            解决分支冲突
                当Git无法自动合并分支时，就要手动解决

    分支管理策略
        通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
        如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
        git merge --no-ff -m "merge with no-ff" dev
        git log --graph --pretty=online --abbrev-commit
        在实际开发中，我们应该按照几个基本原则进行分支管理：
            首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
            干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
            每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
    Bug分支
        先保存工作现场
            git stash
            git status 工作区是干净的
        切换到出现Bug的分支（假定master）
            git checkout master
        从master分支创建临时分支
            git checkout -b issue-101
        修复后，切换到master分支，完成合并，删除issue-101分支
        回到刚才的工作现场继续工作
            git checkout dev
            git status 工作区依然是干净的
            git stash list
            git stash apply
            git stash drop
            或者
            git stash pop 恢复的同时把stash内容也删了

            你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
                git stash apply stash@{0} 这里的命令不会操作！！！
    Feature分支
        开发一个新feature，最好新建一个分支；
        如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
    多人协作
        git remote 查看远程库的信息
        git remote -v
        推送分支
            git push origin master
            git push origin dev

    加入开源协作
        首先fork作者的项目
        从自己的账号下clone仓库
        向自己的仓库推送
        在Github上发起一个pull request
        
    添加忽略文件
        忽略一些配置文件
        在.git所在目录添加.gitignore（这是一个隐藏文件）
        touch .gitignore
        如果要忽略的文件已经在索引里，需要用这个命令先删除
        想要忽略的文件已经添加到缓存中去了，我们可以使用rm命令将其从中移除：
        git rm --cached <FILENAME>
        可以使用正则表达式
