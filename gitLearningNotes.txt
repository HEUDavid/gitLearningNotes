Git命令学习笔记
	Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。
	pwd显示当前目录
	git init将这个目录变成Git可以管理的仓库
	第一步将文件放到Git可以管理的文件目录下
	git add <file>添加文件修改到暂存区
	git commit
	git commit -m "说明"把暂存区提交到当前分支master
	git status
版本回退
	git log查看历史记录
	git reset --hard HEAD^上一个版本
	git reset --hard HEAD^^上上一个版本
	git reset --hard HEAD~100上100个版本
	git reset --hard 加上commit id的数字（前几位）
	git reflog记录你的每一次命令
	可以根据commit id回退到任何一个版本
工作区与暂存区
	工作区（Working Directory）就是所看到的目录
	版本库（Repositor）就是.git
	暂存区.git里包含了很多重要信息其中就有暂存区（stage）
	git diff HEAD -- <file>查看当前版本库和工作区的区别
撤销修改
	git checkout -- <file>回到最近一次git commit或者git add
删除操作
	直接在文件管理器里删除或者rm <file>
	然后看git status
	git rm <file>
	git commit
	如果删错了，可以git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
远程仓库
	Git与SVN
	git push -u origin master
		远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
		本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，关联本地的master分支和远程的master分支，在以后的推送或者拉取时就可以简化命令。
		git push origin master
		以后这样：
			git add <file>
			git commit -m "desc"
			git push origin master
	git克隆
		git clone git@github.com:HEUDavid/gitSkills.git
		Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
	分支管理
		每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
		当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。以后的修改就在dev分支上。
			创建分支
				git branch <nane>创建
				git checkout <name>切换
				或者
				git checkout -b dev
				git checkout命令加上-b参数表示创建并切换
			查看分支
				git branch命令会列出所有分支，当前分支前面会标一个*号
			dev分支合并到master分支（当前分支）
				git merge dev
			删除分支dev
				git branch -d dev
			解决分支冲突
				当Git无法自动合并分支时，就要手动解决。
			